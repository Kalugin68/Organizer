import customtkinter as ctk
from PIL import Image, ImageDraw
from Client.GUI.MainPages import contact_page, notes_page, settings_page, tasks_page
from Client.Responses.main_responses import *
import os


# ====== –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä) ======
class OrganizerWindow(ctk.CTkToplevel):
    def __init__(self, username, master, client, authorization):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä–∞"""
        super().__init__()
        ctk.set_appearance_mode("light")  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã (Light/Dark)
        ctk.set_default_color_theme("green")  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã

        self.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤ –Ω–∞—á–∞–ª–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∏–≥–∞–Ω–∏—è
        self.authorization = authorization
        self.master = master
        self.client = client
        self.user_id = None
        self.username = username

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = 1000
        window_height = 505
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2)
        self.geometry(f"{window_width}x{window_height}+{x}+{y}")

        self.__login_name = username

        self.title("–°–µ—Ç–µ–≤–æ–π –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä")
        self.geometry("800x600")


        # === –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç ===
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(fill="both", expand=True)

        # === –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å ===
        self.nav_frame = ctk.CTkFrame(self.main_frame, width=200)
        self.nav_frame.pack(side="left", fill="y")

        # === –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≤–∞—Ç–∞—Ä ===
        custom_path = f"Client/Images/Avatars/user_{get_user_id(self.client, self.username, self.user_id)}.jpg"
        if os.path.exists(custom_path):
            self.image_author = Image.open(custom_path)
        else:
            self.image_author = Image.open("Client/Images/author.jpg")

        # === –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        self.rounded_image_author = self.round_image(self.image_author, 1320)  # –î–µ–ª–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä—É–≥–ª—ã–º
        self.image_author_tk = ctk.CTkImage(size=(80, 80), light_image=self.rounded_image_author,
                                            dark_image=self.rounded_image_author)

        self.image_author_label = ctk.CTkLabel(self.nav_frame, text="", image=self.image_author_tk)
        self.image_author_label.pack(padx=10, pady=5)

        self.login_label = ctk.CTkLabel(self.nav_frame, text=self.get_login_name(), font=("Arial", 14))
        self.login_label.pack(padx=10, pady=5)

        # === –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ===
        self.nav_buttons = {
            "–ó–∞–¥–∞—á–∏": ctk.CTkButton(self.nav_frame, text="üìã –ó–∞–¥–∞—á–∏", command=lambda: self.show_frame("tasks")),
            "–ó–∞–º–µ—Ç–∫–∏": ctk.CTkButton(self.nav_frame, text="üìù –ó–∞–º–µ—Ç–∫–∏", command=lambda: self.show_frame("notes")),
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã": ctk.CTkButton(self.nav_frame, text="üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã", command=lambda: self.show_frame("contacts")),
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": ctk.CTkButton(self.nav_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=lambda: self.show_frame("settings"))
        }

        for btn in self.nav_buttons.values():
            btn.pack(fill="x", padx=10, pady=5)

        # === –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ===
        self.content_frame = ctk.CTkFrame(self.main_frame)
        self.content_frame.pack(side="right", fill="both", expand=True)

        # === –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        self.user_id = get_user_id(self.client, self.username, self.user_id)

        # === –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü ===
        self.frames = {
            "tasks": tasks_page.TasksPage(self.content_frame, self.client, self.user_id).create_tasks_page(),
            "notes": notes_page.NotePage(self.content_frame, self.client, self.user_id).create_notes_page(),
            "contacts": contact_page.ContactPage(self.content_frame, self.client, self.user_id).create_contacts_page(),
            "settings": settings_page.SettingsPage(self.content_frame, self.client, self.user_id,
                                                   self.username, self, self.authorization).create_settings_page()
        }

        self.after(200, self.show_main_window)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ–∫–Ω–∞

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —ç—Ç–æ–≥–æ –æ–∫–Ω–∞
        self.protocol("WM_DELETE_WINDOW", self.on_close)

    def show_main_window(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–∫–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.show_frame("tasks")  # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Ä–∞–Ω "–ó–∞–¥–∞—á–∏" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.deiconify()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ

    def get_login_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.__login_name

    def show_frame(self, name):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        for frame in self.frames.values():
            frame.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        self.frames[name].pack(fill="both", expand=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    def round_image(self, image_main, radius):
        """–ó–∞–∫—Ä—É–≥–ª—è–µ—Ç —É–≥–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        image_main = image_main.convert("RGBA")  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        width, height = image_main.size

        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
        mask = Image.new("L", (width, height), 0)
        draw = ImageDraw.Draw(mask)
        draw.rounded_rectangle((0, 0, width, height), radius=radius, fill=255)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫—É –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_main.putalpha(mask)

        return image_main

    def update_avatar(self, image_path):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        try:
            new_image = Image.open(image_path)
            rounded = self.round_image(new_image, 1320)
            new_ctk_img = ctk.CTkImage(size=(80, 80), light_image=rounded, dark_image=rounded)

            self.image_author_label.configure(image=new_ctk_img)
            self.image_author_label.image = new_ctk_img  # –ß—Ç–æ–±—ã –Ω–µ —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –Ω–µ —É–¥–∞–ª–∏–ª

        except Exception as e:
            print(f"[AVATAR ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä: {e}")

    def on_close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        if self.master:
            self.master.destroy()
