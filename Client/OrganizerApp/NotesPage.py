import customtkinter as ctk
from CTkListbox import *
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID


class NotePage:
    def __init__(self, parent_frame, client, user_id):
        """–°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–º–µ—Ç–æ–∫ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        self.parent_frame = parent_frame  # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–º–µ—Ç–æ–∫
        self.client = client  # –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        self.user_id = user_id  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.notes = {}  # –•—Ä–∞–Ω–∏—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {note_id: (title, text)}
        self.note_ids = []  # –°–ø–∏—Å–æ–∫ ID –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è

    def create_notes_page(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–º–µ—Ç–æ–∫"""
        frame = ctk.CTkFrame(self.parent_frame)
        frame.pack(fill="both", expand=True)

        # –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ (—Å–ª–µ–≤–∞)
        self.notes_listbox = CTkListbox(frame, width=200, height=300)
        self.notes_listbox.pack(side="left", padx=10, pady=(10, 100), fill="y")
        self.notes_listbox.bind("<<ListboxSelect>>", self.load_note)  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–∫–∏

        # === –ü—Ä–∞–≤—ã–π —Ñ—Ä–µ–π–º (–≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–Ω–æ–ø–∫–∏) ===
        right_frame = ctk.CTkFrame(frame)
        right_frame.pack(side="right", fill="both", expand=True, pady=10)

        # –ü–æ–ª—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
        self.title_entry = ctk.CTkEntry(right_frame, width=300, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        self.title_entry.pack(side="top", padx=10, pady=5, fill="x")

        self.textbox = ctk.CTkTextbox(right_frame, width=300, height=200)
        self.textbox.pack(side="top", padx=10, pady=5, fill="x")

        # === –ö–Ω–æ–ø–∫–∏ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–¥—Ñ—Ä–µ–π–º–µ) ===
        buttons_frame = ctk.CTkFrame(right_frame)
        buttons_frame.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏
        self.add_button = ctk.CTkButton(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self.add_note)
        self.add_button.grid(row=0, column=0, padx=5, pady=5)

        self.save_button = ctk.CTkButton(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_note)
        self.save_button.grid(row=0, column=1, padx=5, pady=5)

        self.delete_button = ctk.CTkButton(buttons_frame, text="üóë –£–¥–∞–ª–∏—Ç—å", fg_color="red", command=self.delete_note)
        self.delete_button.grid(row=1, column=0, padx=5, pady=5)

        self.clear_button = ctk.CTkButton(buttons_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è", command=self.clear_entries)
        self.clear_button.grid(row=1, column=1, padx=5, pady=5)

        self.get_notes_from_server()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞

        return frame

    def get_notes_from_server(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        if self.client.connect():
            note_data = self.client.send_data(f"GET_NOTES;{self.user_id}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä

            if note_data and note_data not in ["ERROR", "NO_NOTES"]:
                notes = note_data.split("\n")  # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏

                self.notes.clear()
                self.note_ids.clear()
                self.notes_listbox.delete(0, "end")  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

                for note_info in notes:
                    if note_info.strip():  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        note_parts = note_info.split("|")
                        if len(note_parts) == 3:  # –§–æ—Ä–º–∞—Ç "note_id|title|text"
                            note_id, note_title, note_text = note_parts
                            self.notes[note_id] = (note_title, note_text)
                            self.note_ids.append(note_id)
                            self.notes_listbox.insert("end", note_title)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ UI

                print(f"[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.notes)} –∑–∞–º–µ—Ç–æ–∫.")
            else:
                print("[INFO] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    def add_note(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É"""
        if self.client.connect():
            title = self.title_entry.get().strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            text = self.textbox.get("1.0", "end").strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏

            if title and text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                note_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                response = self.client.send_data(f"ADD_NOTE;{self.user_id};{note_id};{title};{text}")

                if response == "SUCCESS":
                    self.notes[note_id] = (title, text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
                    self.note_ids.append(note_id)
                    self.notes_listbox.insert("end", title)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ UI
                    self.title_entry.delete(0, "end")  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    self.textbox.delete("1.0", "end")  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                else:
                    print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")

    def load_note(self, event=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É"""
        selected_index = self.notes_listbox.curselection()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

        if selected_index is not None:
            note_id = self.note_ids[selected_index]  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            title, text = self.notes[note_id]  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            self.title_entry.delete(0, "end")
            self.title_entry.insert(0, title)  # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.textbox.delete("1.0", "end")
            self.textbox.insert("1.0", text)  # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏

    def delete_note(self):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–∑ UI –∏ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.client.connect():
            selected_index = self.notes_listbox.curselection()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏

            if selected_index is not None:
                note_id = self.note_ids.pop(selected_index)  # –£–¥–∞–ª—è–µ–º ID –∏–∑ —Å–ø–∏—Å–∫–∞

                response = self.client.send_data(f"DELETE_NOTE;{note_id}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ

                if response == "SUCCESS":
                    del self.notes[note_id]  # –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                    self.notes_listbox.delete(selected_index)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ UI
                    self.textbox.delete("1.0", "end")  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                    self.title_entry.delete(0, "end")  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                else:
                    print("[ERROR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")

    def save_note(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏"""
        if self.client.connect():
            selected_index = self.notes_listbox.curselection()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏

            if selected_index is not None:
                note_id = self.note_ids[selected_index]  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏
                new_title = self.title_entry.get().strip()  # –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                new_text = self.textbox.get("1.0", "end").strip()  # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç

                if new_title and new_text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                    response = self.client.send_data(f"UPDATE_NOTE;{note_id};{new_title};{new_text}")

                    if response == "SUCCESS":
                        self.notes[note_id] = (new_title, new_text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
                        self.update_notes_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –≤ UI
                    else:
                        print("[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")

    def update_notes_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"""
        self.notes_listbox.delete(0, 'end')  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤ UI

        for note_id, (title, _) in self.notes.items():
            self.notes_listbox.insert('end', title)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–Ω–æ–≤–æ

    def clear_entries(self):
        self.title_entry.delete(0, "end")
        self.textbox.delete("1.0", "end")
