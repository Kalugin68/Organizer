import customtkinter as ctk
from tkinter import messagebox
import os
from tkinter import filedialog
from PIL import Image


class SettingsPage:
    def __init__(self, parent_frame, client, user_id, username, main_window, authorization):
        """–°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–º–µ—Ç–æ–∫ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        self.parent_frame = parent_frame
        self.client = client
        self.user_id = user_id
        self.username = username
        self.main_window = main_window
        self.authorization = authorization

    def create_settings_page(self):
        frame = ctk.CTkFrame(self.parent_frame)
        frame.pack(fill="both", expand=True, padx=40, pady=30)

        # üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", font=("Arial", 20, "bold")).pack(pady=(0, 20))

        # üîπ –§—Ä–µ–π–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        info_frame = ctk.CTkFrame(frame, corner_radius=10)
        info_frame.pack(fill="x", pady=10)

        ctk.CTkLabel(info_frame, text=f"–õ–æ–≥–∏–Ω: {self.username}", font=("Arial", 14)).pack(pady=10)

        # üîπ –§—Ä–µ–π–º —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        stats_frame = ctk.CTkFrame(frame, corner_radius=10)
        stats_frame.pack(fill="x", pady=10)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        stats = self.load_stats()
        ctk.CTkLabel(stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", font=("Arial", 14, "bold")).pack(pady=(10, 5))
        ctk.CTkLabel(stats_frame, text=f"–ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {stats.get('tasks')}", font=("Arial", 12)).pack()
        ctk.CTkLabel(stats_frame, text=f"–ó–∞–º–µ—Ç–æ–∫: {stats.get('notes')}", font=("Arial", 12)).pack()
        ctk.CTkLabel(stats_frame, text=f"–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {stats.get('contacts')}", font=("Arial", 12)).pack()

        # üîπ –§—Ä–µ–π–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_frame = ctk.CTkFrame(frame, corner_radius=10)
        settings_frame.pack(fill="x", pady=10)

        ctk.CTkLabel(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", font=("Arial", 14, "bold")).pack(pady=(10, 5))

        change_pass_btn = ctk.CTkButton(settings_frame, text="–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", command=self.change_password)
        change_pass_btn.pack(pady=5)

        # üîπ –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
        upload_avatar_btn = ctk.CTkButton(settings_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", command=self.upload_avatar)
        upload_avatar_btn.pack(pady=5)

        ctk.CTkLabel(settings_frame, text="–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", font=("Arial", 12)).pack(pady=(10, 2))
        theme_select = ctk.CTkComboBox(settings_frame, values=["–°–≤–µ—Ç–ª–∞—è", "–¢–µ–º–Ω–∞—è"], command=self.change_theme)
        theme_select.set("–°–≤–µ—Ç–ª–∞—è")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        theme_select.pack(pady=5)

        # üîπ –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        logout_button = ctk.CTkButton(frame, text="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", fg_color="red", command=self.logout)
        logout_button.pack(pady=20)

        return frame

    def change_password(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""

        window = ctk.CTkToplevel(self.parent_frame)
        window.title("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")
        window.geometry("400x300")
        window.grab_set()  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        window_width = 400
        window_height = 300
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2)
        window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        ctk.CTkLabel(window, text="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:", anchor="w").pack(pady=(20, 5), padx=20, fill="x")
        old_pass = ctk.CTkEntry(window, show="*")
        old_pass.pack(padx=20, fill="x")

        ctk.CTkLabel(window, text="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", anchor="w").pack(pady=(15, 5), padx=20, fill="x")
        new_pass = ctk.CTkEntry(window, show="*")
        new_pass.pack(padx=20, fill="x")

        ctk.CTkLabel(window, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", anchor="w").pack(pady=(15, 5), padx=20, fill="x")
        confirm_pass = ctk.CTkEntry(window, show="*")
        confirm_pass.pack(padx=20, fill="x")

        def submit():
            old = old_pass.get()
            new = new_pass.get()
            confirm = confirm_pass.get()

            if not old or not new or not confirm:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
                return

            if new != confirm:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            message = f"CHANGE_PASSWORD;{self.user_id};{old};{new}"
            if self.client.connect():
                response = self.client.send_data(message)

                if response == "SUCCESS":
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
                    window.destroy()
                elif response == "INVALID_PASSWORD":
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å.")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        ctk.CTkButton(window, text="–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", command=submit).pack(pady=20)

    def load_stats(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.client.connect():
            try:
                response = self.client.send_data(f"GET_STATS;{self.user_id}")

                if response == "NO_DATA":
                    return {"tasks": 0, "notes": 0, "contacts": 0}
                elif response == "ERROR":
                    return {"tasks": "-", "notes": "-", "contacts": "-"}

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ tasks:12;notes:5;contacts:3
                parts = response.split(";")
                stats = {part.split(":")[0]: int(part.split(":")[1]) for part in parts}
                return stats

            except Exception as e:
                print(f"[CLIENT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                return {"tasks": "-", "notes": "-", "contacts": "-"}

    def change_theme(self, theme_name):
        """–°–º–µ–Ω–∞ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        if theme_name == "–¢–µ–º–Ω–∞—è":
            ctk.set_appearance_mode("dark")
        else:
            ctk.set_appearance_mode("light")

    def logout(self):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.main_window.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.authorization.deiconify()

    def upload_avatar(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä"""
        file_path = filedialog.askopenfilename(
            filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp")]
        )

        if not file_path:
            return  # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_dir = "Client/Images/Avatars"
            os.makedirs(save_dir, exist_ok=True)
            ext = os.path.splitext(file_path)[-1]
            saved_path = os.path.join(save_dir, f"user_{self.user_id}{ext}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º, —É–º–µ–Ω—å—à–∞–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            image = Image.open(file_path)
            image = image.resize((80, 80))
            image.save(saved_path)

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")

            # –û–±–Ω–æ–≤–∏–º –∞–≤–∞—Ç–∞—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
            self.main_window.update_avatar(saved_path)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
