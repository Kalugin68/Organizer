import customtkinter as ctk
import re


class TasksPage:
    def __init__(self, parent_frame, client, user_id):
        """–°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        self.parent_frame = parent_frame  # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è UI –∑–∞–¥–∞—á
        self.client = client  # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        self.user_id = user_id  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        self.tasks = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞–¥–∞—á
        self.task_entry_frame = None  # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏)
        self.task_texts = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞–¥–∞—á {task_widget: text}
        self.task_status = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á {task_widget: status}

    def create_tasks_page(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–¥–∞—á–∞–º–∏"""
        frame = ctk.CTkFrame(self.parent_frame)
        frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.tasks_list_label = ctk.CTkLabel(frame, text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", font=("Arial", 18))
        self.tasks_list_label.pack(pady=(10, 5))

        # –§—Ä–µ–π–º —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á (–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π)
        self.tasks_frame = ctk.CTkScrollableFrame(frame)
        self.tasks_frame.pack(fill="both", expand=True, pady=5, padx=5)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
        self.button_tasks_frame = ctk.CTkFrame(frame)
        self.button_tasks_frame.pack(padx=5, pady=(10, 0))

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        self.add_task_button = ctk.CTkButton(self.button_tasks_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
                                             command=self.show_task_entry)
        self.add_task_button.grid(row=0, column=0, pady=10, padx=15)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –ë–î
        self.save_tasks_button = ctk.CTkButton(self.button_tasks_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏",
                                               command=self.save_tasks_to_db)
        self.save_tasks_button.grid(row=0, column=1, pady=10, padx=15)

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.error_label = ctk.CTkLabel(frame, text="")
        self.error_label.pack()

        self.get_tasks_from_server()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞

        return frame

    def show_task_entry(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        if self.task_entry_frame is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.task_entry_frame = ctk.CTkFrame(self.tasks_frame)
            self.task_entry_frame.pack(fill="x", pady=5)

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            self.task_entry = ctk.CTkEntry(self.task_entry_frame, width=400, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É...",
                                           validate="key",
                                           validatecommand=(self.parent_frame.register(self.validate_input), '%P'))
            self.task_entry.pack(side="left", padx=5)

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–∞
            confirm_button = ctk.CTkButton(self.task_entry_frame, text="‚úî", width=30, command=self.add_task)
            confirm_button.pack(side="right", padx=5)

    def save_tasks_to_db(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""

        if self.client.connect():
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
            response = self.client.send_data(f"DELETE_TASKS_FROM_USER_ID;{self.user_id}")

            if response == "OK":
                print("[INFO] –ó–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã")

        if not self.tasks:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.error_label.configure(text="–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", text_color="red")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        if len(self.tasks) != len(self.task_status):
            self.error_label.configure(text="–û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞—á –∏ —Å—Ç–∞—Ç—É—Å–æ–≤!", text_color="red")
            print("[ERROR] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            return

        all_success = True  # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á

        for task, task_status_var in zip(self.tasks, self.task_status.values()):
            task_text = task  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task_status_text = task_status_var.get() if isinstance(task_status_var, ctk.StringVar) else task_status_var

            if self.client.connect():
                print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏: '{task_text}', —Å—Ç–∞—Ç—É—Å: '{task_status_text}'")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                response = self.client.send_data(f"ADD_TASK;{self.user_id};{task_text};{task_status_text}")

                if response != "OK":
                    all_success = False  # –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å, —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–∏—Ç—Å—è

        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
        if all_success:
            self.error_label.configure(text="–í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", text_color="green")
        else:
            self.error_label.configure(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—á!", text_color="red")

    def get_tasks_from_server(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö"""
        if self.client.connect():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            task_data = self.client.send_data(f"GET_TASKS;{self.user_id}")

            if task_data != "ERROR" and task_data != "NO_TASKS":
                tasks = task_data.split("\n")  # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                for task_info in tasks:
                    if task_info.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                        task_parts = task_info.split("|")
                        if len(task_parts) == 2:  # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "—Ç–µ–∫—Å—Ç|—Å—Ç–∞—Ç—É—Å"
                            task_text, task_status = task_parts
                            self.add_task_to_ui(task_text, task_status)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ UI
                        else:
                            print(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏: {task_info}")
            elif task_data == "NO_TASKS":
                print("[INFO] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
            else:
                print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏.")

    def add_task_to_ui(self, task_text, task_status):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        task_frame = ctk.CTkFrame(self.tasks_frame)
        task_frame.pack(fill="x", pady=5)

        # –ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏
        task_label = ctk.CTkLabel(task_frame, text=task_text, anchor="w", font=("Arial", 14, "normal"))
        task_label.pack(side="left", padx=5, fill="x", expand=True)

        # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.task_texts[task_label] = task_text
        self.tasks.append(task_text)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        delete_button = ctk.CTkButton(task_frame, text="‚ùå", width=30,
                                      command=lambda: self.remove_task(task_frame, task_label, task_text))
        delete_button.pack(side="right", padx=5)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        edit_button = ctk.CTkButton(task_frame, text="‚úè", width=30,
                                    command=lambda: self.edit_task(task_label, task_frame, edit_button,
                                                                   status_dropdown))
        edit_button.pack(side="right", padx=5)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏ (—Å—Ç–∞—Ç—É—Å)
        status_var = ctk.StringVar(value=task_status)
        self.update_task_status(task_label, status_var)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –µ—ë —Å—Ç–∞—Ç—É—Å–æ–º
        status_options = ["–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"]
        status_dropdown = ctk.CTkComboBox(task_frame, values=status_options, variable=status_var, state="readonly",
                                          command=lambda s: self.update_task_status(task_label, status_var))
        status_dropdown.pack(side="right", padx=5)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.task_status[task_label] = status_var

    def validate_input(self, value):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)"""
        return len(value) <= 100  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤

    def add_task(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        task_text = self.task_entry.get().strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞

        if task_text:
            task_frame = ctk.CTkFrame(self.tasks_frame)
            task_frame.pack(fill="x", pady=5)

            # –ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏
            task_label = ctk.CTkLabel(task_frame, text=task_text, anchor="w", font=("Arial", 14, "normal"))
            task_label.pack(side="left", padx=5, fill="x", expand=True)

            # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
            self.task_texts[task_label] = task_text
            self.tasks.append(task_text)

            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            delete_button = ctk.CTkButton(task_frame, text="‚ùå", width=30,
                                          command=lambda: self.remove_task(task_frame, task_label, task_text))
            delete_button.pack(side="right", padx=5)

            # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            edit_button = ctk.CTkButton(task_frame, text="‚úè", width=30,
                                        command=lambda: self.edit_task(task_label, task_frame, edit_button,
                                                                       status_dropdown))
            edit_button.pack(side="right", padx=5)

            # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏
            status_var = ctk.StringVar(value="–î–æ–±–∞–≤—å —Å—Ç–∞—Ç—É—Å")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–î–æ–±–∞–≤—å —Å—Ç–∞—Ç—É—Å"
            status_options = ["–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"]
            status_dropdown = ctk.CTkComboBox(task_frame, values=status_options, variable=status_var, state="readonly",
                                              command=lambda s: self.update_task_status(task_label, status_var))
            status_dropdown.pack(side="right", padx=5)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
            self.task_status[task_label] = status_var

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        if self.task_entry_frame:
            self.task_entry_frame.destroy()  # –£–±–∏—Ä–∞–µ–º —Ñ—Ä–µ–π–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
            self.task_entry_frame = None

    def edit_task(self, task_label, task_frame, edit_button, status_dropdown):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task_text = task_label.cget("text")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏

        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –∑–Ω–∞—á–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        clean_text = re.sub(r" [‚úÖ‚è≥‚ùå]+$", "", task_text)

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        edit_entry = ctk.CTkEntry(task_frame, width=400)
        edit_entry.insert(0, clean_text)  # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        edit_entry.pack(side="left", padx=5, fill="x", expand=True)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_entry.configure(validate="key", validatecommand=(self.parent_frame.register(self.validate_input), '%P'))

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.confirm_button = ctk.CTkButton(task_frame, text="‚úî", width=30,
                                            command=lambda: self.confirm_edit_task(task_label, edit_entry, edit_button,
                                                                                   status_dropdown))
        self.confirm_button.pack(side="right", padx=5)

        # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        task_label.pack_forget()
        edit_button.pack_forget()
        status_dropdown.pack_forget()

    def confirm_edit_task(self, task_label, edit_entry, edit_button, status_dropdown):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        new_text = edit_entry.get().strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏

        if new_text:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
            self.task_texts[task_label] = new_text

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            current_status = status_dropdown.get()

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            status_symbol = " ‚ùå" if current_status == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else \
                " ‚è≥" if current_status == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" else \
                    " ‚úÖ" if current_status == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" else ""

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            task_label.configure(text=new_text + status_symbol, font=("Arial", 14, "normal"))

        task_label.pack(side="left", padx=5, fill="x", expand=True)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Ç–∫—É –∑–∞–¥–∞—á–∏
        edit_button.pack(side="right", padx=5)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        status_dropdown.pack(side="right", padx=5)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        edit_entry.destroy()  # –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.confirm_button.destroy()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    def update_task_status(self, task_label, status_var):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ–Ω—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)"""
        status = status_var.get()  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
        self.task_status[task_label] = status_var

        # üîπ –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        task_text = self.task_texts.get(task_label, task_label.cget("text"))

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ":
            task_label.configure(font=("Arial", 14, "normal"), text=task_text + " ‚úÖ", text_color="Green")
        elif status == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ":
            task_label.configure(font=("Arial", 14, "normal"), text=task_text + " ‚è≥", text_color="Orange")
        elif status == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
            task_label.configure(font=("Arial", 14, "normal"), text=task_text + " ‚ùå", text_color="Red")

    def remove_task(self, task_frame, task_label, task_text):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        self.tasks.remove(task_text)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
        self.task_texts.pop(task_label, None)  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        self.task_status.pop(task_label)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        task_frame.destroy()  # –£–¥–∞–ª—è–µ–º —Ñ—Ä–µ–π–º —Å –∑–∞–¥–∞—á–µ–π –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

