"""
Модуль: PasswordHasher
Описание:
Этот модуль реализует безопасное хеширование и проверку паролей с использованием библиотеки bcrypt.

Зачем это нужно:
- Пароли никогда не должны храниться в базе данных в открытом виде.
- Вместо этого мы сохраняем только хеш — одностороннее преобразование, которое нельзя легко расшифровать.
- При аутентификации введённый пароль хешируется тем же способом и сравнивается с уже сохранённым хешем.

Как работает:
1. При регистрации вызывается `hash_password(password)`, который:
   - Генерирует соль (уникальный случайный набор байтов).
   - Хеширует пароль + соль с помощью bcrypt.
   - Возвращает строковое представление хеша (вместе с солью внутри).

2. При входе используется `check_password(password, hashed)`:
   - Функция сравнивает введённый пароль с сохранённым хешем.
   - bcrypt сам извлекает соль из хеша и проверяет корректность.

Примечание:
bcrypt автоматически обрабатывает соль внутри хеша, поэтому нет необходимости хранить её отдельно.
"""

import bcrypt

class PasswordHasher:
    @staticmethod
    def hash_password(password: str) -> str:
        """
        Хеширует переданный пароль с использованием bcrypt и возвращает строковый хеш.

        :param password: Пароль в виде строки (обычно от пользователя)
        :return: Хешированная строка пароля (включая соль)
        """
        salt = bcrypt.gensalt()  # Генерация уникальной соли
        hashed = bcrypt.hashpw(password.encode('utf-8'), salt)  # Хеширование пароля с солью
        return hashed.decode('utf-8')  # Возвращаем строку (удобно для хранения в БД)

    @staticmethod
    def check_password(password: str, hashed: str) -> bool:
        """
        Проверяет, соответствует ли введённый пароль хешу из базы данных.

        :param password: Обычный пароль, введённый пользователем
        :param hashed: Хешированный пароль из базы данных
        :return: True, если пароль верный, иначе False
        """
        return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))  # Проверка совпадения
